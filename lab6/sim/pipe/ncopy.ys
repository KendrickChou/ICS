#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
#################################################################
# 	Name: Zhou Jiahao
#	ID: 519021911217
#
# 	A simple description of the optimization:
#		1. Divide the lenth into 4 cases
#			a. len >=9
#			b. 1 < len <9
#			c. len = 1
#			d. len = 0
#-----------------------case a--------------------------------------
#		for case a, I unroll the loop into 9 * x + 2 * y + 1
#		to reduce the move of %rdi and %rsi,
#		I use instructions like
#		"mrmovq $72(%rdi),%r10" rather than "iaddq $72,%rdi"
#		to save an instruction
#-----------------------case b--------------------------------------
#		just like case a, I unroll the loop into 2 * y + 1
#		and when exit loop 2, just use "mrmovq $16(%rdi),%r10"
#		to replace "iaddq $16,%rdi"
#------------------case c and case d--------------------------------
#		Just deal separately
#		Here is a little trick to increase your score from 59.8 to 60
#		just put "mrmovq (%rdi),%r10" brefor je lenNot0
#		because case len = 0, there will be no effect on CPE
#---------------------some principles--------------------------------
#		the key is trade space for time
#		It is important to reduce the movement of %rdi and %rsi
#		when you use jxx, jump to the high possibility case
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	iaddq $-9,%rdx
	jge first9
	iaddq $8,%rdx	#iaddq $9,%rdx	iaddq $-1,%rdx
	jg first2
	mrmovq (%rdi),%r10
	je	lenNot0
	ret
lenNot0: 
	rmmovq %r10, (%rsi)
	andq %r10, %r10	
	jle Done
	iaddq $1, %rax
	ret

Loop9:
	iaddq $72,%rdi
	iaddq $72,%rsi
first9:
	mrmovq (%rdi), %rbp
	mrmovq 8(%rdi),%r8
	mrmovq 16(%rdi),%r9
	mrmovq 24(%rdi),%r10
	mrmovq 32(%rdi),%r11
	mrmovq 40(%rdi),%r12
	mrmovq 48(%rdi),%r13
	mrmovq 56(%rdi),%r14
	mrmovq 64(%rdi),%rbx
	rmmovq %rbp, (%rsi)
	rmmovq %r8, 8(%rsi)
	rmmovq %r9, 16(%rsi)
	rmmovq %r10, 24(%rsi)
	rmmovq %r11, 32(%rsi)
	rmmovq %r12, 40(%rsi)
	rmmovq %r13, 48(%rsi)
	rmmovq %r14, 56(%rsi)
	rmmovq %rbx, 64(%rsi)
	andq %rbp, %rbp	
	jle Npos1	
	iaddq $1, %rax
Npos1:
	andq %r8,%r8
	jle Npos2
	iaddq $1,%rax
Npos2:
	andq %r9,%r9
	jle Npos3
	iaddq $1,%rax
Npos3:
	andq %r10,%r10
	jle Npos4
	iaddq $1,%rax
Npos4:
	andq %r11,%r11
	jle Npos5
	iaddq $1,%rax
Npos5:
	andq %r12,%r12
	jle Npos6
	iaddq $1,%rax
Npos6:
	andq %r13,%r13
	jle Npos7
	iaddq $1,%rax
Npos7:
	andq %r14,%r14
	jle Npos8
	iaddq $1,%rax
Npos8:
	andq %rbx,%rbx
	jle test
	iaddq $1,%rax
	
test:
	iaddq $-9,%rdx
	jge Loop9
	iaddq $8,%rdx
	jg NineToTwofirst
	jne Done
	mrmovq 72(%rdi),%r10
	rmmovq %r10,72(%rsi)
	andq %r10, %r10
	jle Done
	iaddq $1,%rax
	ret

NineToTwo:
	iaddq $16,%rdi
	iaddq $16,%rsi
NineToTwofirst:
	mrmovq 72(%rdi), %r10
	mrmovq 80(%rdi), %r11
	rmmovq %r10, 72(%rsi)	
	rmmovq %r11, 80(%rsi)
	andq %r10, %r10	
	jle NineToTwoNpos	
	iaddq $1, %rax
	
NineToTwoNpos:
	andq %r11, %r11	
	jle NineToTwotest		
	iaddq $1, %rax	

NineToTwotest:
	iaddq $-2,%rdx
	jg NineToTwo
	jne Done

	mrmovq 88(%rdi), %r10
	rmmovq %r10, 88(%rsi)
	andq %r10, %r10	
	jle Done
	iaddq $1, %rax
	ret

Loop2:
	iaddq $16,%rdi
	iaddq $16,%rsi
first2:
	mrmovq (%rdi), %r10
	mrmovq 8(%rdi), %r11
	rmmovq %r10, (%rsi)	
	rmmovq %r11, 8(%rsi)
	andq %r10, %r10		
	jle Npos		
	iaddq $1, %rax	
Npos:
	andq %r11, %r11	
	jle test2		
	iaddq $1, %rax	
test2:
	iaddq $-2,%rdx
	jg Loop2
	jne Done

	mrmovq 16(%rdi), %r10
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10	
	jle Done
	iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
