                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6d805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7c803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x032: c0f2f7ffffffffffffff | 	iaddq $-9,%rdx
0x03c: 75a000000000000000   | 	jge first9
0x045: c0f20800000000000000 | 	iaddq $8,%rdx	#iaddq $9,%rdx	iaddq $-2,%rdx
0x04f: 762a03000000000000   | 	jg first2
0x058: 50a70000000000000000 | 	mrmovq (%rdi),%r10
0x062: 736c00000000000000   | 	je	lenNot0
0x06b: 90                   | 	ret
0x06c:                      | lenNot0: 
0x06c: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x076: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x078: 71c103000000000000   | 	jle Done		# if so, goto Npos:
0x081: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x08b: 90                   | 	ret
                            | 
0x08c:                      | Loop9:
0x08c: c0f74800000000000000 | 	iaddq $72,%rdi
0x096: c0f64800000000000000 | 	iaddq $72,%rsi
0x0a0:                      | first9:
0x0a0: 50570000000000000000 | 	mrmovq (%rdi), %rbp	# read val from src...
0x0aa: 50870800000000000000 | 	mrmovq 8(%rdi),%r8
0x0b4: 50971000000000000000 | 	mrmovq 16(%rdi),%r9
0x0be: 50a71800000000000000 | 	mrmovq 24(%rdi),%r10
0x0c8: 50b72000000000000000 | 	mrmovq 32(%rdi),%r11
0x0d2: 50c72800000000000000 | 	mrmovq 40(%rdi),%r12
0x0dc: 50d73000000000000000 | 	mrmovq 48(%rdi),%r13
0x0e6: 50e73800000000000000 | 	mrmovq 56(%rdi),%r14
0x0f0: 50374000000000000000 | 	mrmovq 64(%rdi),%rbx
0x0fa: 40560000000000000000 | 	rmmovq %rbp, (%rsi)
0x104: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)
0x10e: 40961000000000000000 | 	rmmovq %r9, 16(%rsi)
0x118: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x122: 40b62000000000000000 | 	rmmovq %r11, 32(%rsi)
0x12c: 40c62800000000000000 | 	rmmovq %r12, 40(%rsi)
0x136: 40d63000000000000000 | 	rmmovq %r13, 48(%rsi)
0x140: 40e63800000000000000 | 	rmmovq %r14, 56(%rsi)
0x14a: 40364000000000000000 | 	rmmovq %rbx, 64(%rsi)
0x154: 6255                 | 	andq %rbp, %rbp		# val <= 0?
0x156: 716901000000000000   | 	jle Npos1		# if so, goto Npos:
0x15f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x169:                      | Npos1:
0x169: 6288                 | 	andq %r8,%r8
0x16b: 717e01000000000000   | 	jle Npos2
0x174: c0f00100000000000000 | 	iaddq $1,%rax
0x17e:                      | Npos2:
0x17e: 6299                 | 	andq %r9,%r9
0x180: 719301000000000000   | 	jle Npos3
0x189: c0f00100000000000000 | 	iaddq $1,%rax
0x193:                      | Npos3:
0x193: 62aa                 | 	andq %r10,%r10
0x195: 71a801000000000000   | 	jle Npos4
0x19e: c0f00100000000000000 | 	iaddq $1,%rax
0x1a8:                      | Npos4:
0x1a8: 62bb                 | 	andq %r11,%r11
0x1aa: 71bd01000000000000   | 	jle Npos5
0x1b3: c0f00100000000000000 | 	iaddq $1,%rax
0x1bd:                      | Npos5:
0x1bd: 62cc                 | 	andq %r12,%r12
0x1bf: 71d201000000000000   | 	jle Npos6
0x1c8: c0f00100000000000000 | 	iaddq $1,%rax
0x1d2:                      | Npos6:
0x1d2: 62dd                 | 	andq %r13,%r13
0x1d4: 71e701000000000000   | 	jle Npos7
0x1dd: c0f00100000000000000 | 	iaddq $1,%rax
0x1e7:                      | Npos7:
0x1e7: 62ee                 | 	andq %r14,%r14
0x1e9: 71fc01000000000000   | 	jle Npos8
0x1f2: c0f00100000000000000 | 	iaddq $1,%rax
0x1fc:                      | Npos8:
0x1fc: 6233                 | 	andq %rbx,%rbx
0x1fe: 711102000000000000   | 	jle test
0x207: c0f00100000000000000 | 	iaddq $1,%rax
                            | 	
0x211:                      | test:
0x211: c0f2f7ffffffffffffff | 	iaddq $-9,%rdx
0x21b: 758c00000000000000   | 	jge Loop9
0x224: c0f20800000000000000 | 	iaddq $8,%rdx	#iaddq $9,%rdx	iaddq $-2,%rdx
0x22e: 767e02000000000000   | 	jg NineToTwofirst
0x237: 74c103000000000000   | 	jne Done
0x240: 50a74800000000000000 | 	mrmovq 72(%rdi),%r10
0x24a: 40a64800000000000000 | 	rmmovq %r10,72(%rsi)
0x254: 62aa                 | 	andq %r10, %r10
0x256: 71c103000000000000   | 	jle Done
0x25f: c0f00100000000000000 | 	iaddq $1,%rax
0x269: 90                   | 	ret
                            | 
0x26a:                      | NineToTwo:
0x26a: c0f71000000000000000 | 	iaddq $16,%rdi
0x274: c0f61000000000000000 | 	iaddq $16,%rsi
0x27e:                      | NineToTwofirst:
0x27e: 50a74800000000000000 | 	mrmovq 72(%rdi), %r10	# read val from src...
0x288: 50b75000000000000000 | 	mrmovq 80(%rdi), %r11
0x292: 40a64800000000000000 | 	rmmovq %r10, 72(%rsi)	# ...and store it to dst
0x29c: 40b65000000000000000 | 	rmmovq %r11, 80(%rsi)
0x2a6: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2a8: 71bb02000000000000   | 	jle NineToTwoNpos		# if so, goto Npos:
0x2b1: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
0x2bb:                      | NineToTwoNpos:
0x2bb: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x2bd: 71d002000000000000   | 	jle NineToTwotest		# if so, goto Npos:
0x2c6: c0f00100000000000000 | 	iaddq $1, %rax		# count++		# count++
                            | 
0x2d0:                      | NineToTwotest:
0x2d0: c0f2feffffffffffffff | 	iaddq $-2,%rdx
0x2da: 766a02000000000000   | 	jg NineToTwo
0x2e3: 74c103000000000000   | 	jne Done
                            | 
0x2ec: 50a75800000000000000 | 	mrmovq 88(%rdi), %r10
0x2f6: 40a65800000000000000 | 	rmmovq %r10, 88(%rsi)
0x300: 62aa                 | 	andq %r10, %r10	
0x302: 71c103000000000000   | 	jle Done
0x30b: c0f00100000000000000 | 	iaddq $1, %rax
0x315: 90                   | 	ret
                            | 
0x316:                      | Loop2:
0x316: c0f71000000000000000 | 	iaddq $16,%rdi
0x320: c0f61000000000000000 | 	iaddq $16,%rsi
0x32a:                      | first2:
0x32a: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x334: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x33e: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x348: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x352: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x354: 716703000000000000   | 	jle Npos		# if so, goto Npos:
0x35d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x367:                      | Npos:
0x367: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x369: 717c03000000000000   | 	jle test2		# if so, goto Npos:
0x372: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x37c:                      | test2:
0x37c: c0f2feffffffffffffff | 	iaddq $-2,%rdx
0x386: 761603000000000000   | 	jg Loop2
0x38f: 74c103000000000000   | 	jne Done
                            | 
0x398: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x3a2: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x3ac: 62aa                 | 	andq %r10, %r10	
0x3ae: 71c103000000000000   | 	jle Done
0x3b7: c0f00100000000000000 | 	iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3c1:                      | Done:
0x3c1: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3c2:                      | End:
                            | #/* $end ncopy-ys */
0x3c2:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3c8:                      | 	.align 8
0x3c8:                      | src:
0x3c8: 0100000000000000     | 	.quad 1
0x3d0: feffffffffffffff     | 	.quad -2
0x3d8: 0300000000000000     | 	.quad 3
0x3e0: fcffffffffffffff     | 	.quad -4
0x3e8: 0500000000000000     | 	.quad 5
0x3f0: 0600000000000000     | 	.quad 6
0x3f8: f9ffffffffffffff     | 	.quad -7
0x400: 0800000000000000     | 	.quad 8
0x408: f7ffffffffffffff     | 	.quad -9
0x410: 0a00000000000000     | 	.quad 10
0x418: f5ffffffffffffff     | 	.quad -11
0x420: 0c00000000000000     | 	.quad 12
0x428: 0d00000000000000     | 	.quad 13
0x430: 0e00000000000000     | 	.quad 14
0x438: 0f00000000000000     | 	.quad 15
0x440: 1000000000000000     | 	.quad 16
0x448: efffffffffffffff     | 	.quad -17
0x450: eeffffffffffffff     | 	.quad -18
0x458: edffffffffffffff     | 	.quad -19
0x460: ecffffffffffffff     | 	.quad -20
0x468: ebffffffffffffff     | 	.quad -21
0x470: eaffffffffffffff     | 	.quad -22
0x478: e9ffffffffffffff     | 	.quad -23
0x480: 1800000000000000     | 	.quad 24
0x488: 1900000000000000     | 	.quad 25
0x490: e6ffffffffffffff     | 	.quad -26
0x498: e5ffffffffffffff     | 	.quad -27
0x4a0: 1c00000000000000     | 	.quad 28
0x4a8: e3ffffffffffffff     | 	.quad -29
0x4b0: 1e00000000000000     | 	.quad 30
0x4b8: 1f00000000000000     | 	.quad 31
0x4c0: e0ffffffffffffff     | 	.quad -32
0x4c8: dfffffffffffffff     | 	.quad -33
0x4d0: 2200000000000000     | 	.quad 34
0x4d8: ddffffffffffffff     | 	.quad -35
0x4e0: dcffffffffffffff     | 	.quad -36
0x4e8: 2500000000000000     | 	.quad 37
0x4f0: daffffffffffffff     | 	.quad -38
0x4f8: d9ffffffffffffff     | 	.quad -39
0x500: 2800000000000000     | 	.quad 40
0x508: 2900000000000000     | 	.quad 41
0x510: 2a00000000000000     | 	.quad 42
0x518: d5ffffffffffffff     | 	.quad -43
0x520: d4ffffffffffffff     | 	.quad -44
0x528: 2d00000000000000     | 	.quad 45
0x530: 2e00000000000000     | 	.quad 46
0x538: 2f00000000000000     | 	.quad 47
0x540: 3000000000000000     | 	.quad 48
0x548: cfffffffffffffff     | 	.quad -49
0x550: ceffffffffffffff     | 	.quad -50
0x558: 3300000000000000     | 	.quad 51
0x560: ccffffffffffffff     | 	.quad -52
0x568: 3500000000000000     | 	.quad 53
0x570: caffffffffffffff     | 	.quad -54
0x578: c9ffffffffffffff     | 	.quad -55
0x580: 3800000000000000     | 	.quad 56
0x588: c7ffffffffffffff     | 	.quad -57
0x590: 3a00000000000000     | 	.quad 58
0x598: 3b00000000000000     | 	.quad 59
0x5a0: 3c00000000000000     | 	.quad 60
0x5a8: c3ffffffffffffff     | 	.quad -61
0x5b0: c2ffffffffffffff     | 	.quad -62
0x5b8: c1ffffffffffffff     | 	.quad -63
0x5c0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5d0:                      | 	.align 16
0x5d0:                      | Predest:
0x5d0: fadebc0000000000     | 	.quad 0xbcdefa
0x5d8:                      | dest:
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0:                      | Postdest:
0x7d0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7d8:                      | .align 8
                            | # Run time stack
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
                            | 
0x858:                      | Stack:
